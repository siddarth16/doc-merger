TITLE: Build a Doc-Merging Web App (PDF + DOCX) — Next.js 14 + TypeScript + Tailwind (Dark Neon UI) — GitHub + Vercel, end-to-end

ROLE
You are an autonomous senior full‑stack engineer inside Cursor. Deliver a production‑ready repository that I can push to GitHub and instantly deploy on Vercel. Default to modern, stable tools and strong DX. Write clean, documented code and include a thorough README with setup, env vars, and deployment steps.

NORTH STAR
A fast, privacy‑respecting web app to merge documents (PDF and DOCX) with optional page‑range selection, file re‑ordering, and instant preview. Merging must work locally in-browser for PDFs (no server round-trip). DOCX merging should be supported natively; when mixed types (DOCX+PDF), optionally convert DOCX→PDF using a pluggable conversion provider (disabled by default).

TOP-LEVEL REQUIREMENTS
1) Stack
   - Framework: Next.js 14 (App Router) + TypeScript
   - Styling: Tailwind CSS + shadcn/ui + Radix primitives
   - State: Zustand (lightweight), Zustand persist for user prefs
   - File handling: client-side for PDFs; Next.js Route Handlers for server ops
   - PDF: pdf-lib (client) for merge & page selection; pdfjs-dist for preview thumbnails
   - DOCX: docx (npm package) to read/append sections; docx-preview (optional) for quick preview
   - Optional conversion (feature-flagged): CloudConvert or ConvertAPI via simple server route; OFF by default
   - Uploads: Client-side only (no persistent server storage). Use browser memory/IndexedDB; no third-party storage.
   - Icons: lucide-react
   - Analytics: none by default; add a no-op interface to plug later
   - Lint/Format/Test: ESLint, Prettier, Vitest + React Testing Library
   - CI/CD: GitHub Actions (lint+typecheck+tests), Vercel deploy
   - License: MIT

2) Core Features
   - Drag-and-drop multi-file upload (PDF/DOCX). Validate types & sizes (configurable).
   - Reorder files via drag handle; rename files inline.
   - Page-range selector per file (e.g., “1-3,5,7-9”). For DOCX, page range is disabled (document-level merge only) with UI tooltip explaining limitation.
   - Thumbnails/quick preview: PDFs via pdfjs-dist; DOCX via filename + basic metadata (or docx-preview if feasible).
   - Merge modes:
       a) PDF + PDF → merge in-browser using pdf-lib (no server).
       b) DOCX + DOCX → merge sections via docx library; produce a single DOCX.
       c) Mixed (PDF + DOCX) → if feature flag enabled, convert DOCX→PDF on server route, then merge PDFs in-browser; otherwise show “conversion unavailable” banner.
   - Output:
       - If all PDFs → single merged PDF (download blob).
       - If all DOCX → single merged DOCX (download blob).
       - If mixed and conversion enabled → single merged PDF.
   - File name for output: user-editable; defaults to “merged-{YYYYMMDD-HHMM}.pdf|.docx”.
   - Settings panel:
       - Theme (Dark Neon default), accent color
       - PDF metadata (Title, Author) for output
       - Mixed-type conversion toggle + provider key presence indicator
   - UX niceties: Undo last change, Clear all, sample files button, keyboard shortcuts (reorder up/down, delete), toasts for success/error.
   - Privacy: No files leave the browser unless the user enables conversion and provides an API key. Make this explicit in UI and README.

3) Dark Neon Theming (Design Language)
   - Base: true dark (#0b0f14 range), neon accents (cyan/magenta/violet/green). Subtle glassmorphism cards with soft shadows, high contrast, accessible.
   - Use Tailwind + shadcn tokens. Provide 2-3 preset accent palettes (e.g., teal, violet, lime).
   - Motion: framer-motion for micro-interactions (hover, drag, merge success).
   - Components: Toolbar, FileCard, RangeInput with validation, OrderDragHandle, MergeSummary, SettingsSheet, AboutDialog.
   - Typography: modern, semi-condensed; good line-height; truncation with tooltips for long filenames.


5) Implementation Details
   - File model in Zustand: { id, name, kind: "pdf"|"docx", size, lastModified, blob, pages?: number, ranges?: number[] }
   - For PDFs:
       - Use pdfjs to quickly count pages & generate small thumbnails (first page).
       - parseRange.ts validates and clamps ranges to available pages.
       - pdf.ts merges selected pages with pdf-lib in the browser (Web Worker recommended to keep UI responsive).
   - For DOCX:
       - Use docx npm to parse/append sections. If parsing is too heavy client-side, gate behind “experimental DOCX merge” toggle and fall back to concatenation by reading document body; document styles may be simplified.
       - Page-ranges disabled → show tooltip.
       - Export produces a .docx blob via Packer from docx library.
   - Mixed types:
       - If conversion feature is OFF: show non-blocking banner “Mixed types require conversion (off). Merge PDFs or enable conversion in Settings.”
       - If ON: POST DOCX to /api/convert with user-provided provider key; serverless route calls provider; returns PDF for client-side merging. Never store files; stream buffer only.
   - Errors: thoughtful messages; surface provider errors in a friendly way.
   - Accessibility: keyboard nav, focus rings, aria-*.

6) Security & Privacy
   - No server persistence; only memory/IndexedDB. Add a global disclaimer in README and UI footer.
   - Sanitize filenames. Reject huge files by default (e.g., >50MB) with a config constant.
   - Rate-limit /api/convert with simple token bucket (memory) and size guard. Vercel’s serverless timeouts considered.

7) DevEx
   - npm scripts: dev, build, start, lint, typecheck, test, test:watch, format
   - shadcn/ui pre-configured with a “neon-dark” theme (extend Tailwind tokens).
   - Sample fixtures: 2 PDFs, 2 DOCX in /public/samples for demo/testing.
   - Vitest tests:
       - parseRange unit tests (edge cases)
       - pdf.ts merge with small synthetic PDFs (create via pdf-lib in tests)
       - docx.ts append sections smoke test
       - basic Render test for main page (RTL)

8) README must include
   - Overview + feature matrix (PDF, DOCX, Mixed w/ conversion flag)
   - Local dev setup (Node version, pnpm or npm)
   - Env vars (optional): CONVERT_API_PROVIDER, CONVERT_API_KEY
   - How to run locally and produce a build
   - Vercel deploy instructions + build settings
   - Security/Privacy notes
   - Roadmap: OCR, image→PDF, split pages, rotate, watermark
   - Screenshots/GIFs (add script to auto-generate a GIF demo using playwright if time allows)

9) CI/CD
   - GitHub Actions: on push PR -> install, lint, typecheck, test
   - Vercel: Provide vercel.json if necessary; skip build on docs-only commits

10) Visual/UX
   - Dark neon palette, glowing focus states, subtle animated borders on cards.
   - Drag-and-drop area with dashed neon border, hover glow.
   - File cards with: thumbnail (PDF), type badge, name (editable), size, page count, range input, delete, drag handle.
   - Merge controls bar pinned bottom: output name field, “Merge” CTA (animated), progress indicator, toast on completion.
   - Settings in a slide-over sheet with tabs: Appearance / Output / Advanced.

11) Deliverables
   - Complete repo with working app
   - README with steps to: 1) clone 2) install 3) run locally 4) push to GitHub 5) connect & deploy on Vercel
   - .env.example with placeholder keys
   - At least 10 unit tests passing in CI
   - Screenshots in /public/screens

TASKS (DO THIS IN ORDER)
A. Scaffold Next.js 14 + TS + Tailwind + shadcn/ui + radix + lucide + Zustand + pdf-lib + pdfjs-dist + docx + framer-motion + vitest + testing-library.
B. Implement neon-dark Tailwind theme and base layout with ThemeProvider + shadcn.
C. Build UploadDropzone with drag/drop + type validation + pdf/docx parsing hooks; create Web Worker for PDF ops.
D. Build FileList + FileCard (reorderable with dnd-kit or sortable primitives); inline rename; range validation for PDFs.
E. Implement pdf.ts (load, page count, merge by ranges), docx.ts (append sections, export).
F. Implement MergeControls + progress; download logic for PDF/DOCX outputs.
G. Implement SettingsSheet with conversion toggle + provider key inputs; wire optional /api/convert route (no provider by default).
H. Add tests, CI, README, sample files, and screenshots.
I. Polish animations, accessibility, and edge-case handling.

ACCEPTANCE CRITERIA
- PDF+PDF merge in-browser works fast for typical files (<= 20MB each).
- DOCX+DOCX merge outputs a valid .docx.
- Mixed types show clear UX path; if conversion disabled, app still succeeds for pure sets.
- Clean, modern dark neon UI; responsive; accessible; no layout shift.
- One-click deploy to Vercel from GitHub (no server persistence).

NOW: Begin creating the repository with this exact structure, generate the code, and produce the README. Then stop and show me the full file tree and any next steps.
